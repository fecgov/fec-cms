# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2.1
jobs:
  build:
    docker:
      # CircleCI maintains a library of pre-built images documented at
      # https://circleci.com/developer/images
      # use `-browsers` prefix for selenium tests, e.g. `<image_name>-browsers`

      # Python
      - image: cimg/python:3.11-browsers
        environment:
          TZ: America/New_York
          DATABASE_URL: postgres://postgres@0.0.0.0/cfdm_cms_test

      # PostgreSQL
      - image: cimg/postgres:15.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: "trust"
          POSTGRES_DB: cfdm_cms_test


    steps:
      - checkout

      - run:
          name: Install system dependencies
          # Commands listed here are from the CircleCI PostgreSQL config docs:
          # https://circleci.com/docs/2.0/postgres-config/#postgresql-circleci-configuration-example
          command: |
            sudo apt-get update -qq && sudo apt-get install -y build-essential postgresql-client
            echo 'export PATH=/usr/lib/postgresql/15.6/bin/:$PATH' >> $BASH_ENV
            echo "en_US.UTF-8 UTF-8" | sudo tee /etc/locale.gen
            sudo locale-gen en_US.UTF-8

      - restore_cache:
          keys:
          - v2-fec-cms-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v2-fec-cms-dependencies-

      - run:
          name: Install python dependencies
          command: |
            sudo rm -rf .env
            python3 -m venv .env
            . .env/bin/activate
            pip install -r requirements.txt

      - run:
          name: Install node and build web assets
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
            echo ". ~/.nvm/nvm.sh" >> $BASH_ENV
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            nvm install 22.1.0
            nvm use 22.1.0
            nvm alias default 22.1.0
            sudo npm install -g npm
            npm install
            npm rebuild sass
            npm run build

      - save_cache:
          paths:
            - ./.env
            - ./node_modules
          key: v2-fec-cms-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "package.json" }}

      - run:
          name: Ensure database is available
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run tests
          command: |
            . .env/bin/activate
            npm run build-js
            npm run build-sass
            npm run test-single
            pytest

      - run:
          name: Upload coverage report to codecov
          command: |
            . .env/bin/activate
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN} -v
            cd fec; DJANGO_SETTINGS_MODULE=fec.settings.production python manage.py collectstatic --noinput -v 0

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: Installs for deploy
          command: |
            mkdir -p $HOME/bin
            export PATH=$HOME/bin:$PATH
            curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&version=7.1.0" | tar xzv -C $HOME/bin

      - run:
          name: Deploy CMS
          command: |
            export PATH=$HOME/bin:$PATH
            . .env/bin/activate
            invoke deploy --branch $CIRCLE_BRANCH --login True --yes
