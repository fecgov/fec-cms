{% extends "layouts/legal-doc-search-results.jinja" %}
{% import 'macros/legal.jinja' as legal %}
{% import 'macros/filters/typeahead-filter.jinja' as typeahead %}
{% set document_type_display_name = 'Closed Matters Under Review' %}

{% block header %}
<header class="page-header slab slab--primary">
  {{ breadcrumb.breadcrumbs('Search results', [('/legal-resources', 'Legal resources'), ('/legal-resources/enforcement', 'Enforcement')]) }}
</header>
{% endblock %}

{% block filters %}
  <input id="sort" type="hidden" name="sort" value="{{ sort }}">
  <div class="filters__inner">
    {{ legal.keyword_search(result_type, query) }}
    <div class="filter">
      
      <label class="label" for="case_no">MUR number</label>
      <input id="case_no" name="case_no" type="text" value="{{ case_no }}">
    </div>
    {# Python API call without suggestions #}
    <div class="filter">
      <label class="label" for="case_regulatory_citation">Regulatory citation</label>
      <input id="case_regulatory_citation" name="case_regulatory_citation" type="text" value="{{ case_regulatory_citation }}">
    </div>
    <div class="filter">
      <label class="label" for="case_regulatory_citation">Regulatory citation</label>
      <input id="case_regulatory_citation" name="case_regulatory_citation" type="text" value="{{ case_regulatory_citation }}">
    </div>
    {# Regulatory and statutory citations hooked up with suggestions, not functioning and only for concept #}
    {{ typeahead.field(name = 'case_regulatory_citation', title = 'Regulatory citation', dataset='caseRegulatoryCitation') }}
    {{ typeahead.field(name = 'case_statutory_citation', title = 'Statutory citation', dataset='caseStatutoryCitation') }}
    <div class="filter">
      <label class="label" for="case_respondents">MUR respondents</label>
      <input id="case_respondents" name="case_respondents" type="text" value="{{ case_respondents }}">
    </div>
    <div class="filter">
      <legend class="label">Case open date range</legend>
      <div class="range range--date js-date-range">
        <div class="range__input range__input--min" data-filter="range">
          <label for="case_min_open_date">Beginning</label>
          <input id="case_min_open_date" name="case_min_open_date" placeholder="mm/dd/yyyy" value="{{ case_min_open_date }}">
        </div>
        <div class="range__hyphen">-</div>
        <div class="range__input range__input--max" data-filter="range">
          <label for="case_max_open_date">Ending</label>
          <input id="case_max_open_date" name="case_max_open_date" placeholder="mm/dd/yyyy" value="{{ case_max_open_date }}">
        </div>
      </div>
    </div>
    <div class="filter">
      <legend class="label">Case close date range</legend>
      <div class="range range--date js-date-range">
        <div class="range__input range__input--min" data-filter="range">
          <label for="case_min_close_date">Beginning</label>
          <input id="case_min_close_date" name="case_min_close_date" placeholder="mm/dd/yyyy" value="{{ case_min_close_date }}">
        </div>
        <div class="range__hyphen">-</div>
        <div class="range__input range__input--max" data-filter="range">
          <label for="case_max_close_date">Ending</label>
          <input id="case_max_close_date" name="case_max_close_date" placeholder="mm/dd/yyyy" value="{{ case_max_close_date }}">
        </div>
      </div>
    </div>
    <div class="filter">
      <button type="submit" class="button button--cta u-margin--top">Apply filters</button>
    </div>
  </div>
{% endblock %}

{% block results %}
{% with murs = results.murs %}

{% include 'partials/legal-search-results-mur.jinja' %}
{% endwith %}

{% with results=results %}
{% include 'partials/legal-pagination.jinja' %}
{% endwith %}

{% endblock %}
{% block scripts %}
{# super loads scripts from parent #}
{{ super() }}
<script>
let sort_val = "{{ sort | safe }}"
// The case_no column, header-cell
let sort_btn = document.getElementById('js-sort-mur')


const toggle_sort = function() {
    let new_val;
    //On first, there is no querystring yet, so this handles possible null value for 'sort_val' 
    if (sort_val == '-case_no' || sort_val == null || sort_val == '') {
        new_val = 'case_no'
    } else {
        new_val = '-case_no'
    }
    //populate hidden field with current sort value
    document.getElementById('sort').value = new_val

    //submit the filters form
    document.forms["category-filters"].submit()
}

//If there are no results to the query, the table is not rendered so there is no sort_btn and thus an error on trying to add an event listener to it, so:
if (sort_btn) {
    sort_btn.addEventListener("click", toggle_sort);
}

// Keep scroll-position with each reload
//https://stackoverflow.com/questions/17642872/refresh-page-and-keep-scroll-position 
document.addEventListener("DOMContentLoaded", function(event) {
    var scrollpos = localStorage.getItem('scrollpos');
    if (scrollpos) window.scrollTo(0, scrollpos);
});

window.onbeforeunload = function(e) {
    localStorage.setItem('scrollpos', window.scrollY);
    location.reload();
};
</script>
{% endblock %}
